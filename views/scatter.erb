
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>D3 Test</title>
        <script type="text/javascript" src="./javascripts/d3.v3.js"></script>

        <style>
        .axis path,
        .axis line {
           fill: none;
           stroke: black;
           shape-rendering: crispEdges;
        }

        .axis text {
           font-family: sans-serif;
           font-size: 11px;
        }
        </style>

    </head>
    <body>

<script type="text/javascript">

// //Nested data for a scatterplot
// var dataset = [
//                 [5, 20], [480, 90], [250, 50], [100, 33], [330, 95],
//                 [410, 12], [475, 44], [25, 67], [85, 21], [220, 88], [600, 150], [777, 200]
//               ];

//Dynamic, random dataset
var dataset = [];
var numDataPoints = 50;
var xRange = Math.random() * 1000;
var yRange = Math.random() * 1000;
for (var i = 0; i < numDataPoints; i++) {
    var newNumber1 = Math.round(Math.random() * xRange);
    var newNumber2 = Math.round(Math.random() * yRange);
    dataset.push([newNumber1, newNumber2]);
}

//Create a width and height to use for the SVG 'canvas?'
var w = 700;
var h = 400;
var padding = 30;

              //Create SVG element
var svg = d3.select("body")
            .append("svg")
            .attr("width", w)
            .attr("height", h);

var xScale = d3.scale.linear()
            .domain([0, d3.max(dataset, function(d) { return d[0]; })])
            .range([padding, w - padding * 2]);

var yScale = d3.scale.linear()
            .domain([0, d3.max(dataset, function(d) { return d[1]; })])
            .range([h - padding, padding]);

var rScale = d3.scale.linear()
            .domain([0, d3.max(dataset, function(d) { return d[1]; })])
            .range([1, 10]);

svg.selectAll("circle")
   .data(dataset)
   .enter()
   .append("circle")
   .attr("cx", function(d) {
    return xScale(d[0]);
})
   .attr("cy", function(d) {
    return yScale(d[1]);
})
   .attr("r", function(d) {
    return rScale(d[1]);
});

// svg.selectAll("text")
//    .data(dataset)
//    .enter()
//    .append("text")
//    .text(function(d) {
//         return d[0] + "," + d[1];
//     })
//    .attr("x", function(d) {
//     return xScale(d[0]);
//     })
//    .attr("y", function(d) {
//     return yScale(d[1]);
//     })
//    .attr("font-family", "sans-serif")
//    .attr("font-size", "11px")
//    .attr("fill", "red");

var xAxis = d3.svg.axis() //Create the x-axis "scale"
                  .scale(xScale)
                  .orient("bottom");

var yAxis = d3.svg.axis()//Define Y axis scale being drawn
                  .scale(yScale)
                  .orient("left")
                  .ticks(5);

// svg.append("g") //Append the visual scales
//     .call(d3.svg.axis()
//                 .scale(xScale)
//                 .orient("bottom"));

svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(0," + (h - padding) + ")")
    .call(xAxis);

svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(" + padding + ",0)")
    .call(yAxis);

d3.selectAll("circle")
  .transition()
  .duration(0)
  .attr("r", "0%");

d3.selectAll("circle")
  .transition()
  .duration(9000)
  .attr("r", "40%")
  .attr("fill", "white");





  // var scale = d3.scale.linear()
  //                   .domain([100, 500]) //represents that the datapoints are in the domain 100-500
  //                   .range([10, 350]); //we will draw bars with pixels from 10 (min) to 350 (max!)



</script>
<a href="./">Bars</a>
</body>
</html>
